@model LoginViewModel

@{
	ViewData["Title"] = "Welcome";
}

<div class="container col-md-8 col-md-offset-2">
	<table class="table row container" style="margin-top:60px">
		@{ var BillsDetail = Model.Bills.FirstOrDefault(); }
		<thead>
			<tr>
				<th>@Html.DisplayNameFor(model => BillsDetail.DueDate)</th>
				<th>@Html.DisplayNameFor(model => BillsDetail.Description)</th>
				<th>@Html.DisplayNameFor(model => BillsDetail.Amount)</th>
			</tr>
		</thead>
		<tbody>

			@foreach (var item in Model.Bills)
			{

				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.DueDate)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Description)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Amount)
					</td>
				</tr>

			}


		</tbody>
	</table>

	<p>
		<label>
			Card Number:
			<input type="number" value="" onsubmit="if(valid_credit_card(value)==false) error("Not valid card number.")" />
		</label>
		<label>
			Issuer:
			<input list="Issuers" name="CardIssuer" />
		</label>
			<datalist id="Issuers">
				<option value="VISA"/>
				<option value="Mastercard"/>
				<option value="Maestro"/>
				<option value="American Express"/>
				<option value="Diners"/>
			</datalist> 
		<label>
			CVV2:
			<input type="number" />
		</label>

		<button asp-action="Pay" asp-route-id="@BillsDetail.Id">Submit</button>

		<script>
			function valid_credit_card(value) {
				// accept only digits, dashes or spaces
				if (/[^0-9-\s]+/.test(value)) return false;

				// The Luhn Algorithm. It's so pretty.
				var nCheck = 0, nDigit = 0, bEven = false;
				value = value.replace(/\D/g, "");

				for (var n = value.length - 1; n >= 0; n--) {
					var cDigit = value.charAt(n),
						nDigit = parseInt(cDigit, 10);

					if (bEven) {
						if ((nDigit *= 2) > 9) nDigit -= 9;
					}

					nCheck += nDigit;
					bEven = !bEven;
				}

				return (nCheck % 10) == 0;
			}
		</script>
	</p>
</div>
